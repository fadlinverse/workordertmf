/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CancelWorkOrderCreateEvent;
import io.swagger.model.CancelWorkOrderInformationRequiredEvent;
import io.swagger.model.CancelWorkOrderStateChangeEvent;
import io.swagger.model.Error;
import io.swagger.model.EventSubscription;
import io.swagger.model.WorkOrderAttributeValueChangeEvent;
import io.swagger.model.WorkOrderCreateEvent;
import io.swagger.model.WorkOrderDeleteEvent;
import io.swagger.model.WorkOrderInformationRequiredEvent;
import io.swagger.model.WorkOrderStateChangeEvent;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2024-11-01T02:52:33.254Z")

@Validated
@Api(value = "listener", description = "the listener API")
@RequestMapping(value = "/tmf-api/workOrderManagement/v4/")
public interface ListenerApi {

    @ApiOperation(value = "Client listener for entity CancelWorkOrderCreateEvent", nickname = "listenToCancelWorkOrderCreateEvent", notes = "Example of a client listener for receiving the notification CancelWorkOrderCreateEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/cancelWorkOrderCreateEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToCancelWorkOrderCreateEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody CancelWorkOrderCreateEvent data);


    @ApiOperation(value = "Client listener for entity CancelWorkOrderInformationRequiredEvent", nickname = "listenToCancelWorkOrderInformationRequiredEvent", notes = "Example of a client listener for receiving the notification CancelWorkOrderInformationRequiredEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/cancelWorkOrderInformationRequiredEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToCancelWorkOrderInformationRequiredEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody CancelWorkOrderInformationRequiredEvent data);


    @ApiOperation(value = "Client listener for entity CancelWorkOrderStateChangeEvent", nickname = "listenToCancelWorkOrderStateChangeEvent", notes = "Example of a client listener for receiving the notification CancelWorkOrderStateChangeEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/cancelWorkOrderStateChangeEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToCancelWorkOrderStateChangeEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody CancelWorkOrderStateChangeEvent data);


    @ApiOperation(value = "Client listener for entity WorkOrderAttributeValueChangeEvent", nickname = "listenToWorkOrderAttributeValueChangeEvent", notes = "Example of a client listener for receiving the notification WorkOrderAttributeValueChangeEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/workOrderAttributeValueChangeEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToWorkOrderAttributeValueChangeEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody WorkOrderAttributeValueChangeEvent data);


    @ApiOperation(value = "Client listener for entity WorkOrderCreateEvent", nickname = "listenToWorkOrderCreateEvent", notes = "Example of a client listener for receiving the notification WorkOrderCreateEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/workOrderCreateEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToWorkOrderCreateEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody WorkOrderCreateEvent data);


    @ApiOperation(value = "Client listener for entity WorkOrderDeleteEvent", nickname = "listenToWorkOrderDeleteEvent", notes = "Example of a client listener for receiving the notification WorkOrderDeleteEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/workOrderDeleteEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToWorkOrderDeleteEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody WorkOrderDeleteEvent data);


    @ApiOperation(value = "Client listener for entity WorkOrderInformationRequiredEvent", nickname = "listenToWorkOrderInformationRequiredEvent", notes = "Example of a client listener for receiving the notification WorkOrderInformationRequiredEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/workOrderInformationRequiredEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToWorkOrderInformationRequiredEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody WorkOrderInformationRequiredEvent data);


    @ApiOperation(value = "Client listener for entity WorkOrderStateChangeEvent", nickname = "listenToWorkOrderStateChangeEvent", notes = "Example of a client listener for receiving the notification WorkOrderStateChangeEvent", response = EventSubscription.class, tags={ "notification listeners (client side)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Notified", response = EventSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/listener/workOrderStateChangeEvent",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<EventSubscription> listenToWorkOrderStateChangeEvent(@ApiParam(value = "The event data" ,required=true )  @Valid @RequestBody WorkOrderStateChangeEvent data);

}
