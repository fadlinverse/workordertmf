/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CancelWorkOrder;
import io.swagger.model.CancelWorkOrderCreate;
import io.swagger.model.Error;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2024-11-01T02:52:33.254Z")

@Validated
@Api(value = "cancelWorkOrder", description = "the cancelWorkOrder API")
@RequestMapping(value = "/tmf-api/workOrderManagement/v4/")
public interface CancelWorkOrderApi {

    @ApiOperation(value = "Creates a CancelWorkOrder", nickname = "createCancelWorkOrder", notes = "This operation creates a CancelWorkOrder entity.", response = CancelWorkOrder.class, tags={ "cancelWorkOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = CancelWorkOrder.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/cancelWorkOrder",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<CancelWorkOrder> createCancelWorkOrder(@ApiParam(value = "The CancelWorkOrder to be created" ,required=true )  @Valid @RequestBody CancelWorkOrderCreate cancelWorkOrder);


    @ApiOperation(value = "List or find CancelWorkOrder objects", nickname = "listCancelWorkOrder", notes = "This operation list or find CancelWorkOrder entities", response = CancelWorkOrder.class, responseContainer = "List", tags={ "cancelWorkOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CancelWorkOrder.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/cancelWorkOrder",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<List<CancelWorkOrder>> listCancelWorkOrder(@ApiParam(value = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Integer offset,@ApiParam(value = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "Retrieves a CancelWorkOrder by ID", nickname = "retrieveCancelWorkOrder", notes = "This operation retrieves a CancelWorkOrder entity. Attribute selection is enabled for all first level attributes.", response = CancelWorkOrder.class, tags={ "cancelWorkOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CancelWorkOrder.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/cancelWorkOrder/{id}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<CancelWorkOrder> retrieveCancelWorkOrder(@ApiParam(value = "Identifier of the CancelWorkOrder",required=true) @PathVariable("id") String id,@ApiParam(value = "Comma-separated properties to provide in response") @Valid @RequestParam(value = "fields", required = false) String fields);

}
